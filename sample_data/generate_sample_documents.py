#!/usr/bin/env python3
"""
Sample Data Generator for AI Project Artifact Generator
Generates comprehensive project documents for demonstration and testing purposes.
"""

import json
import requests
import time
import os
from datetime import datetime
from pathlib import Path

class SampleDocumentGenerator:
    def __init__(self):
        self.base_url = "http://localhost:8001"
        self.token = None
        self.output_dir = Path("sample_data/generated_documents")
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
    def authenticate(self):
        """Authenticate with the API and get access token."""
        try:
            response = requests.post(
                f"{self.base_url}/api/auth/login",
                json={"email": "demo@company.com", "password": "demo123456"}
            )
            response.raise_for_status()
            self.token = response.json()['tokens']['access_token']
            print("‚úÖ Authentication successful")
            return True
        except Exception as e:
            print(f"‚ùå Authentication failed: {e}")
            return False
    
    def generate_documents(self, project_data, max_docs_per_request=2):
        """Generate documents for a project with rate limiting."""
        if not self.token:
            if not self.authenticate():
                return None
                
        headers = {
            'Authorization': f'Bearer {self.token}',
            'Content-Type': 'application/json'
        }
        
        project_id = project_data['id']
        project_scope = project_data['project_scope']
        document_types = project_data['document_types']
        
        print(f"\nüöÄ Generating documents for: {project_scope['project_name']}")
        
        # Split document types into smaller batches to avoid timeouts
        all_documents = []
        for i in range(0, len(document_types), max_docs_per_request):
            batch_types = document_types[i:i + max_docs_per_request]
            
            request_data = {
                'project_scope': project_scope,
                'document_types': batch_types,
                'additional_instructions': f"Generate professional documentation for {project_scope['business_domain']} domain with emphasis on industry best practices and compliance requirements."
            }
            
            try:
                print(f"  üìÑ Generating batch: {', '.join(batch_types)}")
                start_time = time.time()
                
                response = requests.post(
                    f"{self.base_url}/api/ai-project-generator/generate-documents",
                    json=request_data,
                    headers=headers,
                    timeout=120
                )
                
                if response.status_code == 200:
                    result = response.json()
                    generation_time = time.time() - start_time
                    
                    print(f"  ‚úÖ Generated {len(result['documents'])} documents in {generation_time:.1f}s")
                    all_documents.extend(result['documents'])
                    
                    # Save individual document files
                    for doc in result['documents']:
                        self.save_document(project_id, doc)
                        
                else:
                    print(f"  ‚ùå Error: {response.status_code} - {response.text}")
                    
                # Rate limiting - wait between batches
                time.sleep(2)
                
            except Exception as e:
                print(f"  ‚ùå Exception generating batch: {e}")
                continue
        
        return all_documents
    
    def save_document(self, project_id, document):
        """Save individual document to file."""
        doc_type = document['document_type']
        filename = f"{project_id}_{doc_type}.md"
        filepath = self.output_dir / filename
        
        content = f"""# {document['title']}

**Generated:** {document['metadata']['generated_at']}  
**Domain:** {document['metadata']['domain']}  
**Priority:** {document['metadata']['priority']}  
**Timeline:** {document['metadata']['timeline']}  
**Word Count:** {document['metadata']['word_count']}  

---

{document['content']}

---

**Generated by AI Project Artifact Generator**  
**Document Type:** {doc_type}  
**Project:** {document['metadata']['project_name']}
"""
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"    üíæ Saved: {filename} ({document['metadata']['word_count']} words)")
    
    def generate_all_samples(self):
        """Generate documents for all sample projects."""
        # Load sample projects
        try:
            with open('sample_data/ai_generator_sample_projects.json', 'r') as f:
                projects = json.load(f)
        except FileNotFoundError:
            print("‚ùå Sample projects file not found. Please ensure ai_generator_sample_projects.json exists.")
            return
        
        all_results = {}
        total_docs_generated = 0
        
        print(f"üéØ Starting sample document generation for {len(projects)} projects")
        
        for i, project in enumerate(projects, 1):
            project_id = project['id']
            project_name = project['project_scope']['project_name']
            
            print(f"\n{'='*60}")
            print(f"Project {i}/{len(projects)}: {project_name}")
            print(f"Domain: {project['project_scope']['business_domain']}")
            print(f"Documents to generate: {len(project['document_types'])}")
            
            # Generate documents for this project
            documents = self.generate_documents(project)
            
            if documents:
                all_results[project_id] = {
                    'project_info': project['project_scope'],
                    'documents': {doc['document_type']: doc for doc in documents},
                    'metadata': {
                        'document_count': len(documents),
                        'generation_timestamp': datetime.now().isoformat(),
                        'project_domain': project['project_scope']['business_domain']
                    }
                }
                total_docs_generated += len(documents)
                print(f"  ‚úÖ Project complete: {len(documents)} documents generated")
            else:
                print(f"  ‚ùå Project failed: No documents generated")
        
        # Save consolidated results
        summary_file = self.output_dir / 'sample_generation_summary.json'
        with open(summary_file, 'w', encoding='utf-8') as f:
            json.dump(all_results, f, indent=2, default=str)
        
        # Create index file
        self.create_index_file(all_results, total_docs_generated)
        
        print(f"\n{'='*60}")
        print(f"üéâ GENERATION COMPLETE!")
        print(f"üìä Total projects: {len(projects)}")
        print(f"üìÑ Total documents generated: {total_docs_generated}")
        print(f"üíæ Files saved to: {self.output_dir}")
        
    def create_index_file(self, results, total_docs):
        """Create an index/README file for the generated samples."""
        index_content = f"""# AI Project Artifact Generator - Sample Documents

This directory contains sample project documents generated using the AI Project Artifact Generator.

## Generation Summary

**Generated on:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  
**Total Projects:** {len(results)}  
**Total Documents:** {total_docs}  

## Sample Projects

"""
        
        for project_id, data in results.items():
            project_info = data['project_info']
            docs = data['documents']
            
            index_content += f"""
### {project_info['project_name']}
- **Domain:** {project_info['business_domain']}
- **Timeline:** {project_info['timeline']}
- **Priority:** {project_info['priority']}
- **Budget:** {project_info['budget_range']}
- **Documents Generated:** {len(docs)}

**Files:**
"""
            
            for doc_type in docs.keys():
                filename = f"{project_id}_{doc_type}.md"
                word_count = docs[doc_type]['metadata']['word_count']
                index_content += f"- [`{filename}`](./{filename}) - {word_count} words\\n"
        
        index_content += f"""

## Document Types Available

The AI Project Artifact Generator can create the following document types:

1. **Project Requirements Document (PRD)** - Comprehensive project requirements and specifications
2. **Technical Specifications** - Detailed technical architecture and implementation specifications  
3. **User Stories** - User-focused stories with acceptance criteria and test scenarios
4. **Project Charter** - Executive project authorization and high-level scope definition
5. **Risk Assessment** - Comprehensive risk analysis with mitigation strategies
6. **Business Case** - Financial justification and ROI analysis for the project
7. **Architecture Document** - System architecture design and technical decisions
8. **Test Plan** - Comprehensive testing strategy and execution plan
9. **Deployment Guide** - Step-by-step deployment and configuration instructions
10. **User Manual** - End-user documentation and operational procedures

## Usage

These sample documents demonstrate the AI-powered generation capabilities across different business domains and project types. Each document is tailored to the specific project scope and includes industry-specific best practices.

Generated using the Emergent LLM integration with GPT-4o model.
"""
        
        readme_file = self.output_dir / 'README.md'
        with open(readme_file, 'w', encoding='utf-8') as f:
            f.write(index_content)
        
        print(f"üìã Created index file: {readme_file}")

def main():
    generator = SampleDocumentGenerator()
    generator.generate_all_samples()

if __name__ == "__main__":
    main()